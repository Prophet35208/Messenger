Этап 1. Прототипы и планирование
Базовая реализация сервера была написана. Теперь нужно определится с интерфейсом клиента.

Неободимо создать поле, где будут находится сообщения пользователей. Это не должно быть простое текстовое поле, мне нужно выделять каждое сообщение как объект.
Делается это для того, чтобы можно было пересылать, изменять, копировать и выполнять другие операции над этим объектом. Сообщения должны быть кликабельны!.
1 вариант: ListView, в котором будут сообщения. Возможно надо будет добавить делегат.

Как оказалось, настройка этого элемента оказалось трудной задачей. К тому же примера я так и не нашёл. Пока что оставлю интерфейс в покое, продолжу развивать сервер.

Рассмотрим данные, хранимые на сервере. Это информация о пользователях в виде: id, логин и пароль. Чат: массив пользователей (если больше 2 то групповой) 
и массив сообщений (структура с int id и str текстом). Ешё добавим контакты: id пользователя и массив id его контактов. По идее это должно легко укладываться в таблицы.
Данные накидал. Теперь что я вообще передаю через сокеты. 
Список:
1. Хочу зарегаться (логин, пароль)
2. Хочу зайти (логин, пароль). После этого идёт передача инофрмации, а именно массив структуры чатов (массив пользовталей и массив сообщений) и массив id его контактов вместе с их именами
Можно ещё передать какой то код, который будет свидетельствовать о том, что человек теперь авторизован.
3. Хочу добавить контакт. Операция только для авторизованного. Передача логина на сервер. Сервер создаёт чат на вас двоих. Сервер возвращает "успех" или "не успех".
4. Хочу отправить сообщение. Серверу передаём id кому отправим и сообщение. Сервер получает и меняет свою БД, еслп удачно то возвращает ответ на клиент. Так же отправляет тому человеку сигнал.
5. Хочу создать групповой чат. Клиент условно пишет логины людей, переадёт их серверу. Он получает их id-шки из бд, далее создаёт чат. Отправляет данные о созданном чате всем клиентам, которые вступают в чат
Пока что хватит

Sqlite не поддерживет массивы. Попробуем такую схему таблица user: id, login, password. Табл чат: id и, внимание, некоторая структура, описывающая чат. Запихнуть её в бд как blob.
И ещё одна табл как соединение между user и чат: user_in_chat: id, user_id, chat_id.
Примерное содержание структуры: кол-во сообщений, массив сообщений (сообщение это id пользователя и текст (макс 300 символов на текст))

Со стркутурой определились. Сейчас нужно попробовать реализовать какое-нибудь лёгкое сетевое взаимодействие для того, чтобы лучше понять действие сокетов. Например регистрацию.
Клиент отсылает серверу сообщение. Текст вида "1$login$password"

31.05.2023.
В начале немного покапался в интерфейсе, попробовал парочку параметров. Закоммитил. Сейчас нужно полностью реализовать функционал регистрации и входа. 
Сейчас есть только вход и то с дебаг интерфейсом. 
Сначала сделаю интерфейс. Могу оставить одно окно, которое имеет 2 вида: вид регистрации и вид входа. Для этого при нажатии буду менять характеристики элементов интерфейса.
Теперь к логике. Предположительная структура такая:
	В начале все окна заблочены, есть кнопка соединения.
	Нажимаем кнопку, подсоединяемся к серверу, сервер даёт добро, что готов нас слушать (обрабатывать запросы на регистрацию и вход)
	Включаются кнопки на регистрацию и вход.
	
	Нажимаем на кнопку регистрации, идёт смена режима и можем ввести данные.
	Нужно отправить даные на сервер. Отправим стркой вида "2$login$password". Клиент сам должен проверить соответствие паролей.

Важное замечание: нужно как то разделять передаваемые переменные, учитывая что они переменного размера. Для этого можно использовать некоторый знак разделитель. Допустим это будет $
Чтобы избежать ошибок важно в будущем, при обработке сообщений пользователей (этото знак может там быть), этот знак обрабатывать и недопускать при отправке данных на сервер!!!!

	Сервер принимает данные. Смотрит есть ли уже такой пользователь, если нет - то можно регистрироваться. Если да - то нет. 
	В любом случае отправляет код об успешной или провальной регистрации. Ранее уже использовали код -1 как ошибку и 1 как успех, тут можно так же. 
	Хотя нет, первый параметр может содержать огромные числа, поэтому определим новые коды для этого: 2 - ошибка, 3 - успех (возможно коды менее читабельны, но теперь их не перепутать)
	После принятия ответа от сервера клиент выводит соответствующее сообщение. 